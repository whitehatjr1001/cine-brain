from typing import List, TypedDict, Optional
from langchain_core.messages import BaseMessage
from src.prompts.plan_model import CineBrainPlan # A new Pydantic model for the unified plan

class CineBrainState(TypedDict):
    messages: List[BaseMessage]
    user_query: str
    locale: str

    # Memory Extraction
    extracted_memories: Optional[str] # Relevant past interactions/knowledge

    # Background Investigation
    background_investigation_results: Optional[str] # Initial search results

    # Planning
    current_plan: Optional[CineBrainPlan] # The detailed plan generated by the Planner

    # Execution Results (accumulated by RCET)
    research_findings: List[dict] # Structured research data (from web, story DB, box office)
    validation_report: Optional[str] # Structured feedback on ideas/scripts
    creative_output: Optional[str] # Generated script segments, brainstorms, etc.
    generated_dialogue_text: Optional[str]
    generated_dialogue_audio_path: Optional[str]

    # Workflow Control
    human_feedback_needed: bool
    human_feedback_input: Optional[str]
    error_message: Optional[str]
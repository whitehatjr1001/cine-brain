import asyncio
import logging
import os
import time
from typing import List, Optional

from src.config.execeptions import TextToVideoError
from src.prompts.prompts import get_prompt_template
from src.config.settings import settings
from google import genai
from google.genai import types
from langchain.prompts import PromptTemplate
from langchain_groq import ChatGroq
from pydantic import BaseModel, Field


# Pydantic models for structured output, similar to your TextToImage module
class VideoScenarioPrompt(BaseModel):
    """Class for the video scenario response."""

    narrative: str = Field(..., description="The AI's narrative response, setting the scene.")
    video_prompt: str = Field(
        ...,
        description="A detailed, cinematic prompt for the video generation model.",
    )


class EnhancedVideoPrompt(BaseModel):
    """Class for the enhanced video prompt."""

    content: str = Field(
        ...,
        description="The enhanced and detailed text prompt to generate a video.",
    )



class TextToVideo:
    """
    An upgraded class to handle text-to-video generation using Google's VEO model,
    with flexible configuration options.
    """

    REQUIRED_ENV_VARS = ["GEMINI_API_KEY", "GROQ_API_KEY"]
    VEO_MODEL = "veo-2.0-generate-001"

    def __init__(self):
        # ... (same __init__ method) ...
        self._validate_env_vars()
        self._genai_client: Optional[genai.Client] = None
        self.logger = logging.getLogger(__name__)

    def _validate_env_vars(self) -> None:
        # ... (same _validate_env_vars method) ...
        missing_vars = [var for var in self.REQUIRED_ENV_VARS if not os.getenv(var)]
        if missing_vars:
            raise ValueError(
                f"Missing required environment variables: {', '.join(missing_vars)}"
            )

    @property
    def genai_client(self) -> genai.Client:
        # ... (same genai_client property) ...
        if self._genai_client is None:
            self.logger.info("Initializing Google GenAI Client for Video Generation...")
            self._genai_client = genai.Client(
                http_options={"api_version": "v1beta"},
                api_key=settings.GEMINI_API_KEY,
            )
        return self._genai_client


    # --- MODIFIED METHOD ---
    async def generate_video(
        self,
        prompt: str,
        output_dir: str = "generated_videos",
        duration_seconds: int = 8,
        number_of_videos: int = 1,
        aspect_ratio: str = "16:9",
        negative_prompt: Optional[str] = None,
    ) -> List[str]:
        """
        Asynchronously generate videos with flexible configuration.

        Args:
            prompt: The text prompt describing the video.
            output_dir: Directory to save the videos.
            duration_seconds: Desired duration of the video (5-8).
            number_of_videos: How many videos to generate (1-4).
            aspect_ratio: The video's aspect ratio ("16:9" or "16:10").
            negative_prompt: A prompt describing things to avoid in the video.

        Returns:
            A list of file paths to the generated videos.
        """
        if not prompt.strip():
            raise ValueError("Prompt cannot be empty")

        os.makedirs(output_dir, exist_ok=True)
        self.logger.info(f"Starting video generation for prompt: '{prompt[:80]}...'")

        try:
            # --- Flexible Configuration ---
            video_config = types.GenerateVideosConfig(
                person_generation="dont_allow",
                aspect_ratio=aspect_ratio,
                number_of_videos=number_of_videos,
                duration_seconds=duration_seconds,
                negative_prompt=negative_prompt,
            )

            operation = self.genai_client.models.generate_videos(
                model=self.VEO_MODEL,
                prompt=prompt,
                config=video_config,
            )

            # ... (The rest of the method: polling loop, result handling, saving) ...
            # ... is exactly the same as before.                               ...

            self.logger.info(
                f"Video generation job started with operation: {operation.name}"
            )

            while not operation.done:
                self.logger.info(
                    "Video generation in progress. Checking again in 15 seconds..."
                )
                await asyncio.sleep(15)
                operation = self.genai_client.operations.get(operation.name)

            self.logger.info("Video generation job finished.")
            result = operation.result

            if not result or not result.generated_videos:
                self.logger.error("The generation job completed but produced no videos.")
                raise TextToVideoError("No videos were generated by the API.")

            saved_files = []
            for n, generated_video in enumerate(result.generated_videos):
                timestamp = int(time.time())
                file_path = os.path.join(output_dir, f"video_{timestamp}_{n}.mp4")
                generated_video.video.save(file_path)
                saved_files.append(file_path)
                self.logger.info(f"Video downloaded and saved to {file_path}")

            return saved_files

        except Exception as e:
            self.logger.error(f"Failed to generate video: {str(e)}")
            raise TextToVideoError(f"Failed to generate video: {str(e)}") from e
